import unittest
import xml.etree.ElementTree as et

from parse_xml.parser import get_functions, get_classes, process_function, process_class, parse
from parse_manual.parsed_function import ParsedFunction
from parse_manual.parsed_class import ParsedClass
from parse_manual.parsed_property import ParsedProperty


class TestXMLParse(unittest.TestCase):
    sample_element_tree: et.ElementTree = None

    function1_name = 'test1'
    function1_type = 'Return'
    function1_value = 'This is a generated Test Value!'

    function2_name = 'test2'
    function2_type = 'Return'
    function2_value = 'This is a test value generated by the Generator, isnÂ´t it?'

    function3_name = 'test_custom'
    function3_type = 'Custom'
    function3_value = 'Custom Code'

    class_name = 'Train'
    class_meta = 'Metamodel'

    property1_name = 'mass'
    property1_type = 'int'

    property2_name = 'model'
    property2_type = 'str'

    @classmethod
    def setUpClass(cls) -> None:
        cls.sample_element_tree = et.ElementTree(file='sample.xml')

    @classmethod
    def tearDownClass(cls) -> None:
        del cls.sample_element_tree

    def test_process_function(self):
        #TODO
        pass

    def test_process_class(self):
        #TODO
        pass

    def test_get_functions(self):
        sample_function_dict = get_functions(self.sample_element_tree)

        self.assertIn(self.function1_name, sample_function_dict)
        self.assertIn(self.function2_name, sample_function_dict)
        self.assertIn(self.function3_name, sample_function_dict)

        self.assertIsInstance(sample_function_dict[self.function1_name], ParsedFunction)
        self.assertIsInstance(sample_function_dict[self.function2_name], ParsedFunction)
        self.assertIsInstance(sample_function_dict[self.function3_name], ParsedFunction)

    def test_get_classes(self):
        sample_class_dict = get_classes(self.sample_element_tree)

        self.assertIn(self.class_name, sample_class_dict)

        self.assertIsInstance(sample_class_dict[self.class_name], ParsedClass)


if __name__ == '__main__':
    unittest.main()
